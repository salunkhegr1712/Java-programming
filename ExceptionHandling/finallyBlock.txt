The finally block in java is used to put important codes such as clean up code e.g. 
closing the file or closing the connection. The finally block executes whether exception
rise or not and whether exception handled or not. A finally contains all the crucial statements
regardless of the exception occurs or not.

# There are 3 possible cases where finally block can be used:

    a) When an exception does not rise 

    * In this case, the program runs fine without throwing any exception and finally block execute after the try block.

code{
    try {
        System.out.println("inside try block");
        
        // Not throw any exception
        System.out.println(34 / 2);
    }
    
    // Not execute in this case
    catch (ArithmeticException e) {
        
        System.out.println("Arithmetic Exception");
        
    }
    // Always execute
    finally {
        
        System.out.println(
            "finally : i execute always.");
        
    }
    output :
    // inside try block
    // 17
    // finally : i execute always.
}

    b) When the exception rises and handled by the catch block

    * In this case, the program throws an exception but handled by the catch block, and
    finally block executes after the catch block.


code{
    try {
        System.out.println("inside try block");

        // Throw an Arithmetic exception
        System.out.println(34 / 0);
    }

    // catch an Arithmetic exception
    catch (ArithmeticException e) {

        System.out.println(
            "catch : exception handled.");
    }

    // Always execute
    finally {  
        
      System.out.println("finally : i execute always.");
    }
    output :
    // inside try block
    // catch : exception handled.
    // finally : i execute always.
}

    c) When exception rise and not handled by the catch block

    * In this case, the program throws an exception but not handled by catch so finally block execute after 
    the try block and after the execution of finally block program terminate abnormally, But finally block 
    execute fine.

code{
    try {
        System.out.println("Inside try block");

        // Throw an Arithmetic exception
        System.out.println(34 / 0);
    }

    // Can not accept Arithmetic type exception
    // Only accept Null Pointer type Exception
    catch (NullPointerException e) {

        System.out.println(
            "catch : exception not handled.");
    }

    // Always execute
    finally {

        System.out.println(
            "finally : i will execute always.");
    }

}