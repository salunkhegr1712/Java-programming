    # Exception handling

    ==> main goal of exception handling is even though some code goes to exception that is runtime error so
        it should not affect overall functioning of programme that is except this code all other code should 
        be intact and run as they previosly run without any problem due to its exception code
    
    with exception we can handle only exception / runtime error other kinf of error were not possible to solve
    with exception handlings

    Exception are run time error and we can handle such error with the use of the Exception handling

    main goal of Exception handling is that even presenc of the Exceptions programme should run simply
    without brekage that is programme should not get crash when it tackle with at exception that is runtime
    error

    {
        public static void main(String args[]){
        // System.out.println("hello world');//unclosed string literal
        
        int a,b,c;
        
        a=100;
        b=0;
        c=a/b;
        System.out.println("the value of the division is : "+c);
        System.out.println("end of code!\nBye!");
        // Exception in thread "main" java.lang.ArithmeticException: / by zero
        }
    }

    java language shows error as exception and will also specify the type of exception you run into and
    it is helpfull

    as you can see above example where we are going to use divide by 0 which lead us to error so in order to 
    and it is ArithmeticException so in order to handle it we use try catch block 

    # try catch block

        try{
            
            inside the try block we write the code which has chances to go berserk 
            and lead us to the Exceptions;
        }

        catch(ArithmeticException e){

            the code inside the catch block will get invoked if code from the try block lead to
            some exception so we can use the;

            each exception has own type like above we have divide by 0 exception and it is of
            class "ArithmeticException"  
            
            "e" : it is object which reason which lead to exception you can print or do any other task
                    with e inside the catch block
        
        }


    lets see how try catch block works in real code sense :

    # How to use try catch  block guideline

    in try block if you tackle exception code after that will never be used so try to give less much code to the try block
    ex:
code{ 
        try{        
            int a=10,b=0;
            int r=a/b;
            
            System.out.println("a : "+a);
            System.out.println("b : "+b);
            System.out.println("division is : "+r);    
        }
        catch(ArithmeticException a){
            System.out.println("hello user you entered O at denominator for array");

        }
    }
Output:
    hello user you entered O at denominator for array

    so after r=a/b even we are using exception handling following code will not executed 

    so can simply do :

code{
        int a=10,b=0,r=0;
        try{        
            
            r=a/b;   
        }
        catch(ArithmeticException a){
            System.out.println("hello user you entered O at denominator for array");

        }
        System.out.println("a : "+a);
        System.out.println("b : "+b);
        System.out.println("division is : "+r);   
    }

Output :
        a : 10
        b : 0
        division is : 0

    tips :
            write only that code inside try block which can really lead tp Exceptions
    
    see code again
    {
        public static void main(String args[]){

        int a,b,c;
        a=100;b=0;
        c=a/b;

        System.out.println("the value of the division is : "+c);
        System.out.println("end of code!\nBye!");
        // Exception in thread "main" java.lang.ArithmeticException: / by zero
        }
    }
    we want to run whole code even if we ran into some kind of the exception
    so want to run the code such it should print the type of exception arised  and println below that also run 
    even exception occurs

    # code using try catch block
{
        public static void main(String args[]){

        int a,b,c=0;
        a=100;b=0;
        try{ 
            c=a/b;
        }
        catch(ArithmeticException e){
            
            System.out.println("you ran in exception error");
            System.out.println(e);
        }   
        System.out.println("the value of the division is : "+c);
        System.out.println("end of code!\nBye!");     

        }
    Output :{
    you ran in exception error
    java.lang.ArithmeticException: / by zero
    the value of the division is : 0
    end of code!
    Bye!
    }
    
    so even if code is going to fail due to exception overall functioning of entire programme not going to 
    fail which make the exception handling very very usefull in order to avoid the runtime error
}

    so lets try same code with some twist that is b!=0
    say b=22
{
    public static void main(String args[]){

        int a,b,c=0;
        a=100;b=22;  //change is here only
        try{ 
            c=a/b;
        }
        catch(ArithmeticException e){
            
            System.out.println("you ran in exception error");
            System.out.println(e);
        }   
        System.out.println("the value of the division is : "+c);
        System.out.println("end of code!\nBye!");     

        }
    Output:
        the value of the division is : 4
        end of code!
        Bye!
}

so even if the no exception occured the try catch  block still very good tool for the exception handling and
also prevent the code to go through the Exceptions


example of checked exception and we must have to handle them with help of the exception handling

{


    // import io which can take input from the
    import java.io.*;
    // also lets write some code for the exception handling in case of Checked Exception
    // a example code where we have to handle the checked exception 

    PSV main(){
       FileInputStream n= new FileInputStream("hell.txt");
        //this code will create a IOException 

        // unreported exception java.io.FileNotFoundException; must be caught or declared to be thrown

        // as unchecked exception do not make any noise in compilation process 
        // but checkes exception give error in compilation process itself  
    }
    
    such like that you can be able to access see java exception 
    
}   
    
    # now how can you handle them
    main(){
    // now lets handle it 
        try{
        
            FileInputStream n= new FileInputStream("hell.txt");
        }
        catch(IOException z){
            
            System.out.println(z);
            //java.io.FileNotFoundException: hell.txt (No such file or directory)
            
        }
}

after handling checked exception (in this case it is IOException )