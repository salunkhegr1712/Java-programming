in this file i will write the notes on the java inheritance 

    their are two terms are there which one should know before get started :

        a) Generalization

        Grouping many things inside something and that Grouping is called as Generalization in this multiple entities will able to called by 
        a single name 

        example :

                                Smartphone :

                  a) Iphone     b) Samsung  c) Vivo

            all company creates the Smartphone so we Generalized words Iphone, Samsung, Vivo all into one word Smartphone

                                SUV :

                  a) Breeza  b) Creta  c) Seltos d) Duster      

            all cars Breeza, Creta, Seltos, Duster are fall in one category that is SUV cars so we Generalized all terms 
            in word SUV 

        b) Specialization

            Specialization is more specific, in this we will take one entity and after that we take previous versions and
            do subsequent modification so that forms new versions from it.

            example : 

                    Iphone 3
                       ||
                       ||
                    Iphone 4
                       ||
                       ||
                    Iphone 5

            so here we take Iphone 3 and all of its features and modify them into next version and Iphone 4 has own new modification
            and then it will give rise to new version

            in Specialization one is Derived and base class so in Iphone3 and Iphone4 Iphone4 is Derived from Iphone3 so
            Iphone3 is base class and Iphone4 is Derived class

        # Notes
                                                       _______________       _______________
            in java we do Specialization with help of || Inheritance || and || interfaces || in order to use the Generalization
                                                      -----------------      --------------- 

    # Inheritance

        Parent class
             ^
             |
             |
        child class

above is the notation how we going to show a class is gets Derived from the class 

the Parent class also called superclass and base class on which further child class will get Derived from
the child class is also known as the subclass or Derived class which is get Derived to

also main terms are their :

    a) available  
    b)  accessible

    access specifier will play very important role inside the inheritance in java language 

extends is keyword which is used to use the inheritance in java

we can only inherited data members inside function/methods not outside area inside class

# Important

in java if you declare data members inside a function with access specifier private then we its Derived class will not able 
to access them but if in base class with help of protected so in main function which is outside that class will not able to access 
that data members but at the same time the Derived class will able to access them inside the function

the protected data members are acts like public so you can access the protected data members outside class

if you have a same function in both Derived and base class so at that time the Derived class object will function inside it and
base class object will use the function which is inside it 


# how constructors works 

so now we have seen how the function works in inherited version so lets see in detail how the constructors are will work 

if base class has defined own constructors so each time you envoke new object it will get opened with that 
base class constructors

so lets go and see a example

    code: 

        class Parent{
            public Parent(){
                System.out.println("constructor of parent");
            }
        }

        class Child extends Parent{
            public Child(){
                System.out.println("constructor of child");

            }
        }

        public class constructorInInheritance{
            public static void main(String args[]){
                Child a= new Child();
            };  
        }
      
output : 
    constructor of parent
    constructor of child
    
so from above we can easily see that at such conditions the first a parent object is invoked and further that
it will get added the extra characteristics from the child itself

we can use the constructor to find out the heiarchical arrangement of classes in TOP-DOWN format


# parametric constructor in Inheritance

so above idea will look handy for default constructor but it will become quiet bizzar for parametric constructor

there are multiple cases which we should see in this and we will discuss them below 


notes on super keyword :
the super keyword should used to pass the parameters to for inherited object and it will pass the value to parent constructor
through the child constructor

you have to write : 
                    super(parameters) 

in first line of child constructor if you want to pass the value from child to parent constructor

if you provide wrong inputs to the super then you will tackle with some kind of error as you passed a value to constructor but 
there is no declared constructor function for that kind of input


# javaPoint notes on Super keyword

The super keyword in Java is a reference variable which is used to refer immediate parent class object.

Whenever you create the instance of subclass, an instance of parent class is created implicitly which is referred by super reference variable.

Usage of Java super Keyword:

        super can be used to refer immediate parent class instance variable.
        super can be used to invoke immediate parent class method.
        super() can be used to invoke immediate parent class constructor.


we also can able to fetch the values from parent class in child class with help of the super keyword

class parent{
    int aaaa=100;
}

class child extends parent{
    public void printaaaa(){
        System.out.println(super.aaaa);
    }
}

not only you can fetch value but also able to edit and write also 

you can also access the variable with dont have any kind of the access specifier with the help of the 
super keyword