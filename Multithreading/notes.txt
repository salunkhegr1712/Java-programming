you can use predefined interface or predefined class in order to use multuthreading inside java 

a) extending Thread class
b) implementing Runnable interface

for both method we need Thread class

in class which acts as multithreading then we have to override a function :

    run() // it is a void function

in order to execute run function from multithreading class we have to create its object
and for that object we have to use 

    start()
    if you use multiple start you may tackle some errors 

    start function will run the code inside run from its class 

and in run function you have to write the logic or code which you want to run for Thread

Thread will create additional control flow which run simultanouly with the original control

    # multithreading using Thread class

code{

    // declare a class extending Thread class
    class MyThread extends Thread{
        
        // now write the code for run function in java 
        public void run(){
            int i=0;
            while(i<100){
               System.out.println("additional thread "+i+" hello ");
                i++;
            }
        }
    }

    // the main class
    public class multiThreading {

        // main function of our java code
        public static void main(String args[]){

            // now lets create a object for the multiThreaded class
            MyThread m= new MyThread();

            // now use start function
            m.start();

            int k=0;
            while(k<100){
                System.out.println("original thread "+i+" hello ");
                k=k+1;
            }

        }    
    }
    output :
    original thread 0 world 
    additional thread : 0 hello 
    original thread 1 world 
    additional thread : 1 hello 
    original thread 2 world 
    additional thread : 2 hello 
    original thread 3 world 
    additional thread : 3 hello 
    original thread 4 world 
    additional thread : 4 hello 
}

you can create main class as multiThreaded class also :

code{

    // the main class
    public class multiThreading extends Thread{

        // now write the code for run function in java 
        public void run(){
            
            // you have to write all code which sholuld be run by additional thread inside run function
            int i=0;
            while(i<100){
                System.out.println("additional thread "+i+" hello ");
                i++;
            }
        }

        // main function of our java code
        public static void main(String args[]){

            // now lets create a object for the multiThreaded class
            multiThreading m= new multiThreading();

            // now use start function
            m.start();

            // now write some code inside the main 
            int k=0;
            while(k<100){
                System.out.println("original thread "+i+" hello ");
                k=k+1;
            }
        }
        // sample output 

        original thread 0 world 
        additional thread : 0 hello 
        original thread 1 world 
        additional thread : 1 hello 
        original thread 2 world 
        additional thread : 2 hello 
        original thread 3 world 
        additional thread : 3 hello 
        original thread 4 world 
        additional thread : 4 hello  

    }
}

    # multi Threading with Runnable interface

    written only example for creating a external class and then using it in main class as 
    multiThreading you can also able to declare main function which implements interface

code{

    class MyRunnable implements Runnable
    {
        public void run()
        {
            int i=1;
            while(true)
            {
                System.out.println("additional thread "+i+" hello ");
                i++;
            }
        }
    }
    public static void main(String[] args) {
        
        //MyThread t=new MyThread();
        //ThreadTest t=new ThreadTest();
        MyRunnable t=new MyRunnable();
        Thread th=new Thread(t);
        
        th.start();
        
        int i=1;
        while(true)
        {
            System.out.println("original thread "+i+" hello ");
        }
        
    }
} 