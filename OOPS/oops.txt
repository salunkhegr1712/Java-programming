in oops we are most focused on the object and the classes 

how can you declare and use the java classes and how to manage between the multiple classes

class circle{
    public double radius;
    public double area(){
        return Math.PI*Math.pow(radius,2);
    }
    public double perimeter(){
        return 2*Math.PI*radius;
    }

    # here in following code we are accessing the object inside same class with a method
    public void main(){
        circle c1=new circle();
        c1.radius=10;
        System.out.println(c1.area());
        System.out.println(c1.perimeter());
    }
}

public class filename{
    public static void main(String args[]){
        circle c1=new circle();
        c1.radius=3.5;
        System.out.println(c1.radius);
        System.out.println(c1.area());
        System.out.println(c1.perimeter());
    }
}

above is a example such that we create a class and also how can you access the the property and method
from them 

in java for each class a different className.class file will get generated so say you have 5 classes inside the mainfile.java so for
each of the class a different .class will be generated 


# types of property

type 1) Read and writable property
 
for such cases we are able to create set and get property

type 2) read only 

in such case we fix some value and each next time we just can able to see the value and 
cant able to do modification that is write 

type 3) write only 

this is a kind of rear case where you can just write value and you cant see 
ex you can deposit amount in someonce bank account so you can write new value but at same time you are unable see the account 
balance from that bank account it is 

in this case we can just able to set value not able to use get values

# Constructor in java programming languages

the Constructor is function which is get invoked when you create a object it is mainly used to assign the value
of property to the object.
Basically it is method which has same name that of the className and it also dont have any returntype(it is also not a void function)

how to create a Constructor function

    the Constructor function not take any datatype returntype and it will just have access specifier  

        ex:

            accessSpecifier className(){
                                                // A NON Parameterized Constructor
            }

            accessSpecifier className(int a,int b....){
                                                // A Parameterized Constructor
            }

    note: Constructor dont have any kind of return type related to method


type of Constructor:

1) default Constructor 

    it is a Constructor which is by default Constructor which will get invoked even if you not declared any kind of the
    Constructor and it will not used if declared own Constructor

2) Parameterized Constructor 

    multiple number of Parameterized constructor can be written

    it is a Constructor which takes some Parameter and according to that will assign value to property
    it will invoked with code like :
    
        Rectangle a= new Rectangle(10,5);

3) Non-Parameterized Constructor

    there only one Non-Parameterized constructor should be there in code 
    this are type of Constructor which not take anything as Parameter and it is invoked with code like:

        Rectangle a= new Rectangle();


also as we use data hiding in many cases and at that time we need method to access the such method like set and get
so Constructor can acts like the set function there which can assign value to the property


while creating the array of the class you have to create the array dynamically using with help of new keyword 

new keyword help us to create new object inside the heap 

how you can create any type of array of primitive datatype of user defined class

    //code to create array of any type inside the java programming language
        datatype nameOfVariable[]=new datatype[size];

    ex: 
        // Student class array creation
        Student array[]=new Student[5];

         // array of String of size 5
        String a[]=new String[5];
        
        // array of integers of size 5
        int aa[]=new int[5];

        // array of character of size 10
        char ab[]=new char[10];

such like that you will be able to create the array thats how you can also able you your resources wisely
and able to optimize code 

example of a class and array of class

//class declaration
    class Student{

        private String fname; 
        private String lname;
        private int rollNumber;
        private String branch;

        public Student(){
            
            Scanner input=new Scanner(System.in);
            
            System.out.print("enter you First Name : ");fname=input.next();
            System.out.print("enter you Surname : ");lname=input.next();
            System.out.print("enter you Roll Number : ");rollNumber=input.nextInt();
            System.out.print("enter you first name : ");branch=input.nextLine();

            input.close();
        }

        public Student(String f,String l,int r,String b){

            fname=f;lname=l;rollNumber=r;branch=b;
        }

        public void information(){
            System.out.println("Name : "+fname+" "+lname+"\n"+"\n Branch : "+branch+"\nRoll Number : "+rollNumber);
        }

    }

so in main function you can create object like 

    // we have to initialise the object array dynamically just like below 
        Student array[]=new Student[5];


you can also able to use the loops to manipulate the values inside the object

        Student array[]=new Student[5];

        array[0]=new Student("Ghansham","Salunkhe",111903033,"CSE");
        array[1]=new Student("Anway","Salunkhe",111901035,"CSE");
        array[2]=new Student("Digvijay","Salunkhe",111902034,"ME");
        array[3]=new Student("Aditi","Salunkhe",111905031,"ENTC");
        array[4]=new Student("Komal","Salunkhe",111904032,"CSE");
    
        // lets use an array to fetch the values inside the array
        // for each loop to iterate through object
        for(Student x:array){
            x.information();
        }
        // O/P 
        // Name : Ghansham Salunkhe
        // Branch : CSE
        // Roll Number : 111903033


        // Name : Anway Salunkhe
        // Branch : CSE
        // Roll Number : 111901035


        // Name : Digvijay Salunkhe
        // Branch : ME
        // Roll Number : 111902034


        // Name : Aditi Salunkhe
        // Branch : ENTC
        // Roll Number : 111905031


        // Name : Komal Salunkhe
        // Branch : CSE
        // Roll Number : 111904032